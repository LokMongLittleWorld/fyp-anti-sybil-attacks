0x415565b0()
0x52bbbe29(int184, uint72[], bytes9[], int256, uint208[], bytes8[])
0x7c025200()
0x9a2b8115()
0xfb0f3ee1()
CastCharm(uint256 _mintAmount)
DinoPoobBreakTheShell(uint256 _quantity)
FreeMint(uint256 count_mint)
GeneralMint(uint256 _amount)
InsectBBQ(uint256 tokenQuantity)
JunionWasHereXD_ufpfzhujazyn()
Mint(uint256 _amount)
MintAllowlist(uint256 _mintAmount)
MintFree(uint256 quantity)
Mint_WL(bytes32[] proof,uint256 numberOfToken)
NFTmint(address to, uint256 amount)
PublicMint(uint256 _mintAmount)
SubToJunionOnYoutubeXD_lvfsnfguwqne()
WhitelistMint(uint256 numberOfTokens)
ZapIn(address _toWhomToIssue, address _toYVaultAddress, uint16 _vaultType, address _fromTokenAddress, uint256 _amount, uint256 _minTokensSwapped)
ZapIn(address fromToken, uint256 amountIn, address toVault, address superVault, bool isAaveUnderlying, uint256 minYVTokens, address intermediateToken, address swapTarget, bytes swapData, address affiliate, bool shouldSellEntireBalance)
acceptGrant(uint256 index, uint256 amount, bytes32[] merkleProof)
addCollateralETH()
addDeposit()
addL1Transaction(uint256 babyPubKey, uint48 fromIdx, uint40 loadAmountF, uint40 amountF, uint32 tokenID, uint48 toIdx, bytes permit)
addLayer(uint256 _layerIndex,tuple[] traits)
addLiquidity(address _poolAnchor, address _reserveToken, uint256 _amount)
addLiquidity(address owner, uint256 tokenAmount, uint256 ethAmount)
addLiquidity(address sender, uint256 amount)
addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline)
addLiquidity(uint256 inputBase, uint256 inputToken, address token)
addLiquidity(uint256 share, uint256 token0_max, uint256 token1_max)
addLiquidity(uint256[] amounts, uint256 minToMint, uint256 deadline)
addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline)
addManyToWarRoom(uint256[] tokenIds)
addNewTokenWithEditions(string _uri, uint256 _editions, uint256 _salePrice)
addSubmission(string _evidence, string _name)
addTokenLiquidity(address tokenAddress, uint256 amount)
addVouch(address _submissionID)
add_liquidity(uint256[2] _amounts, uint256 _min_mint_amount, bool _use_underlying)
add_liquidity(uint256[2] amounts, uint256 min_mint_amount)
add_liquidity(uint256[3] uamounts, uint256 min_mint_amount)
adopt(uint256 ticketId)
allowListMint(uint256 count, bytes32[] proof)
allowlistMint(bytes _signature)
allowlistMint(uint256 amount, uint256 maxAmount, bytes _signature)
allowlistMint(uint256 qty)
anySwapOutNative(address token, address to, uint256 toChainID)
anySwapOutUnderlying(address token, address to, uint256 amount, uint256 toChainID)
applyToBatch(uint256 _batchNumber)
approve(address _spender, uint256 _value)
approveAndCallWithSender(address _spender, uint256 _value, bytes4 _selector, bytes _callParams)
atInversebrah(int248 a, uint48[] b, uint32 c, bytes20[] d, bytes30[] e)
atomicMatch_(address[14] addrs, uint256[18] uints, uint8[8] feeMethodsSidesKindsHowToCalls, bytes calldataBuy, bytes calldataSell, bytes replacementPatternBuy, bytes replacementPatternSell, bytes staticExtradataBuy, bytes staticExtradataSell, uint8[2] vs, bytes32[5] rssMetadata)
award(uint256 _id, address _recipient, uint256 _amount, bytes32[] _proof)
batch(bytes[] calls)
batchBuyFromSingleMarketWithETH(address marketProxy,tuple[] tradeDetails)
batchBuyWithERC20s(tuple erc20Details,tuple[] tradeDetails,tuple[] converstionDetails,address[] dustTokens)
batchBuyWithETH(bytes tradeDatas)
batchEthInSwapExactIn(tuple[] swaps,address tokenOut,uint256 minTotalAmountOut)
batchMint(uint256 amountToMint)
batchMint(uint256[] ids)
batchSend(address[] targets, uint256[] values, bytes[] datas)
batchSwap(uint8 kind, tuple[] swaps, address[] assets, tuple funds, int256[] limits, uint256 deadline)
batchSwapExactIn(tuple[] swaps,address tokenIn,address tokenOut,uint256 totalAmountIn,uint256 minTotalAmountOut)
beTheQueen(uint256 quantity)
become_stoic(bytes signature,tuple key)
bid()
bid(uint256 _tokenId)
bidNative(uint32 lotId, address referrer)
bloodMark(uint8 _num)
borrow(address asset, uint256 amount, uint256 interestRateMode, uint16 referralCode, address onBehalfOf)
borrow(address underlying, uint256 borrowAmount)
borrow(uint256 borrowAmount)
bridgeAndCraft(uint256 id, uint256 quantity)
build()
build(address _owner, uint256 accountVersion, address _origin)
build(address owner)
bulkTransfer(tuple[] items,bytes32 conduitKey)
burn(bytes _to, uint256 _amount)
burn(uint256 amount)
burn(uint256 amount, bytes32 to)
burnFunds(bytes _recipient, uint256 _amount)
burnPuppers(uint256[] puppers)
buy(address contractAddress, uint256 tokenAmount, address _referredBy)
buy(address token,uint256 tokenId,address owner,uint256 selling,uint256 buying,uint256 price,uint256 sellerFee,tuple signature)
buy(address token,uint256 tokenId,uint256 price,uint256 sellerFee,tuple signature)
buy(bytes _context)
buy(bytes32 hash, bytes signature, string nonce, uint256 tokenQuantity)
buy(uint256 _amount)
buy(uint256 _amount, address _receiver, bytes32[] _proof)
buy(uint256 _value, address _targetContract, bytes _calldata)
buy(uint256 _x, uint256 _y)
buy(uint256 amount, address token)
buy(uint32 tokenQuantity, uint256 valueSent, uint256 mintId, uint256 expireAt, bytes signature)
buy(uint8 _bomb)
buyAssetsForEth(tuple[] takerOrders,tuple[] makerOrders,address recipient)
buyERC721(tuple sellOrder,tuple signature)
buyERC721(tuple sellOrder,tuple signature,bytes callbackData)
buyEdition(uint256 editionId)
buyForETH(uint256 minimumAmountToBuy, address[] swapPath, uint256 swapDeadline)
buyManyBoxes(uint256 _id, uint128 _quantity)
buyOTokens(address receiver, address oTokenAddress, address paymentTokenAddress, uint256 oTokensToBuy)
buyPresale(bytes signature, uint16 numberOfTokens, uint256 approvedLimit)
buyRound1()
buyRound1Stable(uint256 _amount)
buyTokensByContract(string[] _names, address _contract)
buyWhale(bytes _signature)
buyWhitelistBorp(uint256 tokensNumber)
buyWithKYCData(bytes dataframe, uint8 v, bytes32 r, bytes32 s)
calculateMyResult()
calculateRewards(address account)
callSell(tuple exData)
cancel(bytes32[] itemHashes, uint256 deadline, uint8 v, bytes32 r, bytes32 s)
cancel(tuple order)
cancelAllOrdersForSender(uint256 minNonce)
cancelBuyPrice(address nftContract, uint256 tokenId)
cancelMultipleMakerOrders(uint256[] orderNonces)
cancelOrder(uint256 orderId)
cancelOrder_(address[7] addrs, uint256[9] uints, uint8 feeMethod, uint8 side, uint8 saleKind, uint8 howToCall, bytes calldata, bytes replacementPattern, bytes staticExtradata, uint8 v, bytes32 r, bytes32 s)
cancelReserveAuction(uint256 auctionId)
cast(address[] _targets, bytes[] _datas, address _origin)
castVote(uint256 proposalId, uint8 support)
claim()
claim(address _account, uint256[9] _data, bytes32[] _proof)
claim(address _receiver, uint256 _quantity, address _currency, uint256 _pricePerToken, bytes32[] _proofs, uint256 _proofMaxQuantityPerTransaction)
claim(address _receiver, uint256 _tokenId, uint256 _quantity, address _currency, uint256 _pricePerToken, bytes32[] _proofs, uint256 _proofMaxQuantityPerTransaction)
claim(address _receiver,uint256 _quantity,address _currency,uint256 _pricePerToken,tuple _allowlistProof,bytes _data)
claim(address account, uint256 amount, uint8 v, bytes32 r, bytes32 s)
claim(address owner)
claim(address recipient, uint256 totalEarned, uint256 blockNumber, bytes32[] proof)
claim(address to, uint256 amount, bytes32[] proof)
claim(bytes name, bytes proof)
claim(bytes32 _debridgeId, uint256 _amount, uint256 _chainIdFrom, address _receiver, uint256 _nonce, bytes _signatures, bytes _autoParams)
claim(bytes32 _msgHash, uint8 v, bytes32 r, bytes32 s)
claim(bytes32[] merkleProof, bytes32 leaf, uint256 amount)
claim(tuple[] _balances,uint8 v,bytes32 r,bytes32 s)
claim(uint256 _amount, uint8 _claimNonce, bytes _signature)
claim(uint256 _cid, address _starNFT, uint256 _dummyId, uint256 _powah, bytes _signature)
claim(uint256 _oldId, uint16 _newId, address _account, string _network, bytes _signature)
claim(uint256 amount)
claim(uint256 amount,bytes32[] merkleProof,tuple makerAsk,bool isERC721)
claim(uint256 amountV, bytes32 r, bytes32 s)
claim(uint256 amountV, bytes32 r, bytes32 s, address inviter)
claim(uint256 deadline, uint256 rewards, bool staking, uint8 v, bytes32 r, bytes32 s)
claim(uint256 fullAmount, bytes32[] proof)
claim(uint256 index, address account, uint256 amount, bytes32[] merkleProof)
claim(uint256 index, address account, uint256 amountUSDC, uint256 amountBUMP, bytes32[] merkleProof)
claim(uint256 index, uint256 amount, bytes32[] merkleProof)
claim(uint256 index, uint256 amount, bytes32[] merkleProof, uint256 nftId)
claim(uint256 parentId, bytes label)
claim(uint256 round, uint256[] rewards, bool staking, uint8 v, bytes32 r, bytes32 s)
claim(uint256 totalAmount, uint8 v, bytes32 r, bytes32 s, bool staking)
claim(uint256 trancheId, uint128 amount, bytes32[] merkleProof)
claim(uint256[] tokenIndices)
claim(uint64 quantity, uint256 proofMaxQuantity, bytes32[] proofs)
claim(uint8 airdropType, uint256 amount, address inviter, uint256 rewards, uint8 v, bytes32 r, bytes32 s)
claim(uint8[] treeIds, uint256[] amounts, bytes32[][] merkleProofs)
claimAll(uint256 _instId)
claimAndDelegate(uint256 amount, address delegate, uint256 totalGrant, bytes32[] merkleProof, address destination)
claimBalance(uint256 _startIndex, uint256 _endIndex)
claimCapped(uint256 _cid,address _starNFT,uint256 _dummyId,uint256 _powah,uint256 _cap,bytes _signature)
claimComp(address holder)
claimDivs()
claimERC1155(uint256 _weiAmount, address _nftAddress, uint256 _tokenId, uint256 _tokenAmount, uint256 _expiration, address _linkId, address _linkdropMaster, uint256 _campaignId, bytes _linkdropSignerSignature, address _receiver, bytes _receiverSignature)
claimINFT(address account,uint256 cumulativeAmount,bytes32 expectedMerkleRoot,bytes32[] merkleProof)
claimM1(uint256 qty, bytes32[] proof)
claimManyFromWarRoom(uint16[] tokenIds,bool unstake)
claimMintReward()
claimMultipleTokens(bytes32 merkleRoot,tuple claim,bytes32[] proof)
claimPages(uint256 amount)
claimPhase1(bytes _signature)
claimRank(uint256 term)
claimRefund(uint256 _value, bytes32[] _proof)
claimRewards()
claimRewards(bool claimSafetyRewards, bool claimLiquidityRewards, uint256 merkleCumulativeAmount, bytes32[] merkleProof, bool vestFromTreasuryVester)
claimTokens(bytes _signature, address _recipient, uint256 _amount)
claimTokens(uint256 amount, address delegate, bytes32[] merkleProof)
claimTokens(uint256 amount, bytes32[] merkleProof)
claimTokens(uint32 user_id, address user_address, uint256 user_amount, address delegate_address, bytes32 eth_signed_message_hash_hex, bytes eth_signed_signature_hex, bytes32[] merkleProof, bytes32 leaf)
claimUser1()
claimVolts(uint256 voltsEarned, bytes signature)
claimWTF(address _account, uint256[9] _data, bytes32[] _proof)
claimfree()
clean()
clearMetadataNumber(uint256 tokenId)
clientDepositL1(uint256 _amount, address _tokenAddress)
clipperSwap(address inputToken, uint256 sellAmount, address outputToken, address recipient, uint256 minBuyAmount)
closeTrade(uint16 marketId, bool longToken, uint256 closeAmount, uint256 minBuyAmount, bytes dexData)
collateralize(uint256 _collateralQty)
collect(tuple params)
collectArt(uint256 pcId, uint256 artId, bool makeActive)
commit(address from, address to, uint256 amount)
commit(bytes32)
commitAll(bytes32[] _commitments)
commitEth(address _beneficiary, bool readAndAgreedToMarketParticipationAgreement)
commitTokens(uint256 _amount, bool readAndAgreedToMarketParticipationAgreement)
commit_untargeted(bytes32 s)
commonSynthesis(uint256[] _tokenId, uint256[] _amount, uint256 _monsterTokenid)
communityMint(uint256 community_, uint256 position_, bytes32[] proof_, uint256[] votes_)
completeTransfer(bytes encodedVm)
completeWithdraw()
contribute()
contribute(address _participant, uint256 _amount)
contribute(address _sender, uint256 _bountyId, uint256 _amount)
create()
createAsk(address _tokenContract, uint256 _tokenId, uint256 _askPrice, address _askCurrency, address _sellerFundsRecipient, uint16 _findersFeeBps)
createBid(uint256 auctionId, uint256 amount)
createBid(uint256 tokenId)
createCollection(string name, string symbol, uint256 nonce)
createEditionTiers(tuple[] tiers,address fundingRecipient)
createMinterToken(bytes signature, address contractAddress, uint256 contractToken, string uri, address recipient)
createOpenLockAndDraw(address registry_, address tub_, uint256 wad)
createPairETH(address _nft, address _bondingCurve, address _assetRecipient, uint8 _poolType, uint128 _delta, uint96 _fee, uint128 _spotPrice, uint256[] _initialNFTIDs)
createProxyWithNonce(address _mastercopy, bytes initializer, uint256 saltNonce)
createReserveAuction(address nftContract, uint256 tokenId, uint256 reservePrice)
createVault()
createWrapper(bytes32 _name)
crossOut(address token0, uint256 chainID, address to, uint256 amount)
daInvade(uint256 quantity)
dedMint(uint256 _amount)
delegate(address to)
delegateDeposit(uint256[3] amounts)
deposit()
deposit(address _investor, bytes _whitelistSign)
deposit(address _token, uint256 _amount, uint64 _mintChainId, address _mintAccount, uint64 _nonce)
deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode)
deposit(address from, address to, address tokenAddress, uint96 amount, bytes extraData)
deposit(address recipient, address originToken, uint256 amount, uint256 destinationChainId, uint64 relayerFeePct, uint32 quoteTimestamp)
deposit(address tokenAddress, uint256 amount, address receiverAddress, uint256 targetChainId)
deposit(bytes32 _id)
deposit(uint256 _deposits, uint256 actualSellPriceInWei, uint256 _actualPriceInCents)
deposit(uint256 _pid, uint256 _amount, address _ref)
deposit(uint256 _pid, uint256 _amount, uint256 _harvestBlock, uint256 _yield)
deposit(uint256 _pubkey1, uint256 _pubkey2)
deposit(uint256 unifiedTokenAmount, bool flag)
deposit(uint256 userId, address userAddress)
deposit(uint256 vowID)
deposit(uint256[] amounts)
depositAll()
depositAll(uint256[] amounts, address[] vaultAddresses)
depositERC20(address _l1Token, address _l2Token, uint256 _amount, uint32 _l2Gas, bytes _data)
depositERC20(address _token, uint104 _amount, address _zkSyncAddress)
depositERC20(address account, uint256 amount)
depositERC20(uint256 amount, address tokenAddress, address destinationAddress, uint256 remoteNetworkID, uint256 transferDelay)
depositERC20ForUser(address _token, address _user, uint256 _amount)
depositETH()
depositETH(address lendingPool, address onBehalfOf, uint16 referralCode)
depositETH(address onBehalfOf)
depositETH(uint256 _vaultId, uint8 _tranche)
depositETH(uint32 _l2Gas, bytes _data)
depositEth()
depositEth(bytes _data)
depositEth(uint256 _requestId)
depositEthFor(address target)
depositEtherFor(address _to)
depositFor(address user, address rootToken, bytes depositData)
depositNFT(address from, address to, uint8 nftType, address tokenAddress, uint256 nftID, uint96 amount, bytes extraData)
depositPendingFunds(uint256 assetId, uint256 amount, address depositorAddress)
depositPendingFunds(uint256 assetId, uint256 amount, address owner, bytes32 proofHash)
depositPwrd(uint256[3] inAmounts, uint256 minAmount, address _referral)
depositTo(address to, uint256 amount, address controlledToken, address referrer)
depositToEVM(string ethRecipientOnNear, uint256 fee)
depositToken(address token, uint256 amount)
depositToken0(uint256 _amount)
disburse()
disperseEther(address[] recipients, uint256[] values)
donate(tuple[] _donations)
donateAndBatchMintWithMaskNumbers(uint256[] maskNumbers)
emergencyWithdraw(uint256 _pid)
enter(uint256 userSeed)
enterMarkets(address[] cTokens)
enterWithPermit(uint256 _pspAmount, bytes permit)
ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline)
ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient)
exactInput(tuple params)
exactInputSingle(tuple params)
exactOutput(tuple params)
exchange(int128 i, int128 j, uint256 dx, uint256 min_dy)
exchange(tuple order,tuple sig,uint256 buyerFee,tuple buyerFeeSig,uint256 amount,address buyer)
exchange(uint256 _amount, address[6] _route, uint256[8] _indices, uint256 _min_received)
exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy)
execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures)
execute(address _target, bytes _data)
executeSignatures(bytes message, bytes signatures)
executeTransaction(bytes32[] proof, uint256 index, address l2Sender, address to, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 value, bytes data)
executeTransaction(uint256 outboxIndex, bytes32[] proof, uint256 index, address l2Sender, address destAddr, uint256 l2Block, uint256 l1Block, uint256 l2Timestamp, uint256 amount, bytes calldataForL1)
executeWithdrawal()
exit()
exit(bytes inputData)
exitPool(bytes32 poolId, address sender, address recipient, tuple request)
extractRewards(uint256 _nftId, address _to)
feed()
fight(uint256 _seed)
fillAsk(address _tokenContract, uint256 _tokenId, address _fillCurrency, uint256 _fillAmount, address _finder)
fillOrderRFQ(tuple order,bytes signature,uint256 makingAmount,uint256 takingAmount)
fillOrderRFQToWithPermit(tuple order,bytes signature,uint256 makingAmount,uint256 takingAmount,address target,bytes permit)
fillRfqOrder(tuple order,tuple signature,uint128 takerTokenFillAmount)
fimint(uint256 quantity)
finalize()
finalizeReserveAuction(uint256 auctionId)
flashDeposit(uint256 _ethToDeposit, uint24 _poolFee)
freeListMint(uint256 amount, bytes32[] proof)
freeMint()
freeMint(address to, bytes32[] proof)
freeMint(bytes32[] proof)
freeMint(uint256 _mintAmount)
freeMint(uint256 numToMint, bytes sig, uint256 initQuota)
freeMint(uint64 quantity)
freeMintClaim(address to)
freeMintNft(uint256 index, uint256 amount, bytes32[] proof)
freeMintShark(uint256 qty)
free_mint(uint256 nfts)
freemint()
fulfillAvailableAdvancedOrders(tuple[] advancedOrders, tuple[] criteriaResolvers, tuple[][] offerFulfillments, tuple[][] considerationFulfillments, bytes32 fulfillerConduitKey, address recipient, uint256 maximumFulfilled)
fulfillAvailableOrders(tuple[] orders, tuple[][] offerFulfillments, tuple[][] considerationFulfillments, bytes32 fulfillerConduitKey, uint256 maximumFulfilled)
fulfillOrder(tuple order, bytes32 fulfillerConduitKey)
fund(uint256 amount)
generalMint()
generate(string _data)
getMultipleNFT(uint256 _howMany)
getSatosan(uint256 quantity)
goMint(uint256 _amount)
harvest(uint256 _pid)
increaseTokenLiquidity(uint256 _nftId, uint256 _amount)
incrementCounter()
incrementNonce()
incubateEgg(uint256 _eggId)
initialStake(uint256[] tokenIds, uint256[] weights, address stakeTo, uint16 _deposit, uint16 _rentalPerDay, uint16 _minRentDays, uint32 _rentableUntil, uint32 _maxTimestamp, bytes _signature)
initiateWithdraw(uint256 numShares)
initiateWithdrawal(uint256 withdrawAmount)
issueRebalancingSetWithEther(address _rebalancingSetAddress,uint256 _rebalancingSetQuantity,tuple _exchangeIssuanceParams,bytes _orderData,bool _keepChangeInVault)
issueRebalancingSetWrappingEther(address _rebalancingSetAddress, uint256 _rebalancingSetQuantity, bool _keepChangeInVault)
joinConspiracy(string oath)
joinMatch(uint256 matchID)
joinPool(bytes32 poolId, address sender, address recipient, tuple request)
jumpforfre()
leave(uint256 _share)
linearClaimPendingWithdraw(uint256 _poolId)
linearDeposit(uint256 _poolId, uint128 _amount)
linearWithdraw(uint256 _poolId, uint128 _amount)
list(uint256 channelId, uint256 pairIndex, uint256 offset, uint256 count, uint256 order)
lock(address fromAssetHash, uint64 toChainId, bytes toAddress, uint256 amount)
lock(uint256 _expiration)
lockStakingPoolV1Rewards()
lockStakingPoolV2Rewards()
lockToken(address ethToken, uint256 amount, string accountId)
make(string name, string symbol)
makeOffer(address client, uint256 quoteIndex, uint256 price)
makinbabiesfree(uint256 count)
makingobblin()
marginTrade(uint16 marketId, bool longToken, bool depositToken, uint256 deposit, uint256 borrow, uint256 minBuyAmount, bytes dexData)
matchAskWithTakerBid(tuple takerBid,tuple makerAsk)
matchAskWithTakerBidUsingETHAndWETH(tuple takerBid,tuple makerAsk)
matchBidWithTakerAsk(tuple takerAsk,tuple makerBid)
matchOrders(tuple[] orders, tuple[] fulfillments)
message(string _message)
migrate()
migrateAll(uint8 _to)
mint()
mint(address _owner, uint256 _amount)
mint(address _to, uint16 _num)
mint(address _to, uint256 _amount, uint256 _priceUsd)
mint(address _to, uint256 _blockNumber, bytes32 _blockHash, string _ipfsHash, uint256 _price, bytes _signature)
mint(address _to,uint256 _quantity,tuple _coupon)
mint(address account, uint256 amount, bytes userData, bytes operatorData)
mint(address creatorContractAddress, uint256 claimIndex, uint32 mintIndex, bytes32[] merkleProof)
mint(bytes _data, string _metadata)
mint(bytes data, uint256 amount)
mint(bytes payload)
mint(bytes signature, uint256 nonce, uint256 numberOfTokens)
mint(bytes signature, uint256 randomSeed, uint256 nonce, uint256 amount)
mint(bytes3 color,tuple font,bytes32[8] text)
mint(bytes32 _pHash, uint256 _amountUnderlying, bytes32 _nHash, bytes _sig)
mint(bytes32 _requestId, bytes _data)
mint(bytes32[] _merkleProof, uint256 _mintAmount)
mint(bytes32[] _merkleProof, uint8 _quantity, uint8 _stake)
mint(bytes32[] _proof)
mint(bytes32[] _proof, uint16 numberOfMints)
mint(string _token, address _account, uint256 _expiry, bytes _signature)
mint(string salt, bytes token, uint256 amount)
mint(tuple data,tuple bidShares)
mint(tuple params)
mint(uint256 _amount,address _underlying,uint256 _expiration,address _position,tuple[] _permitCallData)
mint(uint256 _amount,tuple _whitelist)
mint(uint256 _amountToMint, bytes _data)
mint(uint256 _id, uint256 _quantity, bytes _data)
mint(uint256 _mintAmount,string nonce,bytes32 hash,bytes signature)
mint(uint256 amount, address account)
mint(uint256 amount, bytes reason, bytes extraData)
mint(uint256 amount, bytes32[] proof, uint256 freeAmount)
mint(uint256 amount, uint256 nonce, uint8 v, bytes32 r, bytes32 s)
mint(uint256 btc, address account, bytes32[] merkleProof)
mint(uint256 id, uint256 amount, bytes32[] whitelistProof, bytes32[] passProof, bytes32 pass)
mint(uint256 inAmount, bytes32[] merkleProof)
mint(uint256 mintedAmount)
mint(uint256 salt, bytes sig, bytes32[] proof)
mint(uint256 startId, uint8 count)
mint(uint256 tokenId, uint256 startingPrice)
mint(uint256 tokenIds_, bytes32[] whiteListMerkleProof_, address for_)
mint(uint256[] __quantities, bytes32[][] __proofs, uint256[] __allotments, uint256[] __allowlistIds)
mint(uint256[] inputIndexes_, bytes32[] proof_)
mint(uint32 count)
mint(uint64 _strength)
mint(uint8 _number_of_nft, uint8 _payment_token_index)
mint(uint8 editionId)
mint(uint8 inputAsset, uint256 amount)
mintAllowList(uint8 numberOfTokens)
mintAllowlist(bytes32[] merkleProof, uint256 amount)
mintAllowlistedDecagon(bytes32[] _merkleProof)
mintAndApprove(string tokenIPFSPath, address market)
mintArt(address to, uint256 blockNumber, uint256 styleId, string metadata)
mintBatch(address creatorContractAddress, uint256 claimIndex, uint16 mintCount, uint32[] mintIndices, bytes32[][] merkleProofs)
mintBears()
mintBesties(uint256 numberOfTokens)
mintBlocks(uint256 quantity)
mintBunnies(uint256 amount)
mintByUser()
mintByWhitelist(uint256 round, uint256 vipType, address toAddress, uint256 overTime, bytes _signature)
mintCRYPTINIES(uint256 numCryptinies)
mintCandle()
mintCapsuleWhitelist(bytes32 hash, bytes signature, uint256 numberOfTokens)
mintCapsuleWhitelist(bytes32 hash, bytes signature, uint256 tokenId, uint256 numberOfTokens)
mintCitizen()
mintCollectibles(uint256 _count)
mintCruciblePermitAndStake(address aludel,address crucibleFactory,address crucibleOwner,bytes32 salt,tuple permit,bytes permission)
mintCupCat(uint256 numberOfTokens)
mintDA(bytes signature, uint8 mlSpots, uint256 tokenId)
mintDaoNFT(bytes32[] _merkleProof)
mintDegenerates(uint256 numDegeneratesToMint)
mintDevAutograph(string[] tokenURIHash, uint256 numberOfTokens)
mintElderTorch(uint256 tokenQuantity, string signedMessage)
mintElom(uint256 quantity)
mintFANG(uint256 _amount)
mintFighter()
mintFounderToken2(address to, uint256 qty)
mintFree()
mintFree(uint256 _nbTokens)
mintFromPool(uint256 poolId, uint256 groupId, uint256 assetId, uint256 amount)
mintGLICPIXV2_BATCH(uint8 _collection, uint256[] tokenIds)
mintGenesis(uint256 tokenId)
mintGivePublic(address receiver)
mintGoodBlock(uint8 _quantity)
mintHead(uint256 _count)
mintHedgie(uint256 tier, bytes32[] merkleProof)
mintHero(uint256 numberOfTokens)
mintHeroForFree()
mintItem()
mintJerky(uint256 _amount)
mintJpegs(uint256 numberOfTokens)
mintMBAI(uint256 numberOfTokens)
mintMiladies(uint256 qty)
mintMonster()
mintMonster(uint256 numberOfMonstro)
mintNFT(address receiver, uint256 nb_nft)
mintNFT(uint256 _mintAmount, bytes32[] proof)
mintNFT(uint256 numberOfNfts)
mintOfficial(uint256 _amount)
mintOne()
mintOrBurn(tuple params)
mintOutkast(uint256 tokenQuantity, bytes signature, uint256 nonce)
mintPhaseTwoNFT(uint256 _count)
mintPlanet(uint256 lascTokenId)
mintPoser(uint256 amount)
mintPresale(uint256 allowance, bytes32[] proof, uint256 tokenQuantity)
mintPresale(uint256 amountOf9Cat, bytes32 hash, bytes signature)
mintPresale(uint256 numberOfTokens, bytes32[] proof)
mintPresale(uint256 tokenCount, uint256 presaleMaxMint, bytes sig)
mintPrivate(bytes signature, uint8 mlSpots, uint256 tokenId)
mintPrivate(uint8 numberOfTokens, uint8[] colors)
mintProducerPass(uint256 episodeID, uint256 amount)
mintPublic()
mintPublic(address to, bytes32 nonce, bytes sig)
mintPublic(uint16 num, uint16 numMax, uint128 nonce, bytes signature)
mintPublic(uint256 amount)
mintPublic(uint256[] bagIds, uint16[] bagType, uint8[] traits)
mintPublic(uint64 quantity)
mintPublic(uint8 numberOfTokens, uint8[] colors)
mintPublicSale(uint256 tokensCount)
mintPuppers(uint256 qty)
mintPuppy(uint256[] ogDogeList)
mintQuantity(uint64 _quantityToMint)
mintRandom()
mintRandom(uint256 quantity)
mintRandomStreets(address recipient,uint256 quantity)
mintRugWithDog(uint256 numberOfTokens)
mintRugzuki(uint256 _quantity)
mintSale(uint256 amount, bytes32[] proof)
mintSign(uint256 quantity)
mintSlices(uint256 amount)
mintSpecial(uint256 _special)
mintTeam(uint256 numberOfTeams)
mintTicket()
mintTo(address _to)
mintToMultiple(address recipient, uint256 amount)
mintToken()
mintToken(uint256 eventId, uint256 tokenId, address receiver, bytes signedMessage)
mintToken(uint256 mintedAmount)
mintTokens(bytes32 hash, bytes signature, string nonce, uint256 numberOfTokens)
mintTokens(uint256 tokenAmount)
mintTokens(uint8 amount)
mintURS()
mintUser(uint256 _mintAmount)
mintVibes()
mintVibes(uint256 mintCount)
mintWallet(address to, bytes32 salt, bool useFiatToken, uint256 timestamp, bytes signature)
mintWhitelist(bytes32 hash, bytes signature, uint256 numberOfTokens)
mintWhitelistPrice(bytes32 hash, bytes signature, uint256 price, uint256 numberOfTokens)
mintWithN(uint256 NId)
mintWithSingleSashimono(uint256 sashimonoId, uint256 numberOfBushidos)
mintWithSun(uint256 _quantity)
mintWithVibesDiscount(uint256 mintCount)
mintWl(uint256 amount,bytes signature)
mintWorld(tuple _mintData,bytes _signature)
mint_540(uint256 quantity)
mint_free()
moMint(uint256 _mintAmount)
multiAssetSwap(tuple erc20Details,tuple[] erc721Details,tuple[] erc1155Details,tuple[] converstionDetails,tuple[] tradeDetails,address[] dustTokens,uint256[2] feeDetails)
multiListingFill(bytes[] data, uint256[] values, bool revertIfIncomplete)
multiSwap(address fromToken,address toToken,uint256 fromAmount,uint256 toAmount,uint256 expectedAmount,tuple[] path,uint256 mintPrice,address beneficiary,uint256 donationPercentage,string referrer)
multicall(bytes[] data)
multicall(bytes[] data, bool revertOnFail)
multicall(uint256 deadline, bytes[] data)
multiclaimWithTinyKingdoms(uint256[] tinyKingdomsIds)
multihopBatchSwapExactIn(tuple[][] swapSequences,address tokenIn,address tokenOut,uint256 totalAmountIn,uint256 minTotalAmountOut)
multihopBatchSwapExactOut(tuple[][] swapSequences,address tokenIn,address tokenOut,uint256 maxTotalAmountIn)
multiplexBatchSellEthForToken(address outputToken,tuple[] calls,uint256 minBuyAmount)
multiplexBatchSellTokenForEth(address inputToken,tuple[] calls,uint256 sellAmount,uint256 minBuyAmount)
multisend(address _tokenAddr, address[] dests, uint256 value)
multisend(address _tokenAddr, address[] dests, uint256[] values)
mutategobblins()
notarizeDeed(uint256 _amount)
offer(uint256 _id)
offerPunkForSaleToAddress(uint256 punkIndex, uint256 minSalePriceInWei, address toAddress)
openBooster(uint256 amount)
openBox(uint256 boxId)
operate(tuple[] accounts,tuple[] actions)
operate(tuple[] accounts,tuple[] actions,address sendEthTo)
optimizedBuyAssetsForEth(bytes optimizedBuys)
originSwap(address _origin, address _target, uint256 _originAmount, uint256 _minTargetAmount, uint256 _deadline)
outboundTransfer(address _token, address _to, uint256 _amount, uint256 _maxGas, uint256 _gasPriceBid, bytes _data)
outboundTransferTo(tuple _userRequest)
participate()
pay(uint256 _projectId, address _beneficiary, string _memo, bool _preferUnstakedTickets)
permitAndStake(address owner, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s, bytes4 stakeType, bytes data)
placeBid(uint256 _punkID, uint256 _Bid)
placeBid(uint256 _tokenId, uint256 _amount, uint256 _price)
placeBid(uint256 index)
placeBidV2(uint256 auctionId, uint256 amount, address referrer)
placeEditionBid(uint256 _editionId)
placeOrder(uint8 orderType, address tokenIn, address tokenOut, uint256 amountInOffered, uint256 amountOutExpected, uint256 executorFee)
play()
pledge()
preMint(uint256 toMint, bytes32[] proof)
preSaleMint(bytes signature)
preSaleMint(uint256 numberOfTokens)
preSaleMint(uint8 identify_,uint256 num_,bytes32[] proof_)
prepare(tuple args)
presale(uint256 _count, bytes32[] _merkleProof)
presale(uint256 amount)
presaleMint(uint256 nonce, bytes signature, uint256 _amount)
presaleMint(uint256 numberOfHippos)
privateSaleMint1(address account, uint256 amount, bytes32[] proof, uint256 _nftid)
proveAndProcess(bytes _message, bytes32[32] _proof, uint256 _index)
proxyAssert(address dest, uint8 howToCall, bytes calldata)
publicAdopt(uint256 salt, bytes signature)
publicMint()
publicMint(address to, uint256 tokenId)
publicMint(uint16 amount)
publicMint(uint256 _mintAmount)
publicMint(uint256 amount, bool upgrade)
publicMint(uint32 _count)
publicMint(uint64 quantity)
publicMint(uint8 amount)
publicMintMonsterz(uint256 _numberOfMonsters)
publicMintToken()
publicSaleMint()
publicSaleMint(uint256 _quantity)
publicSaleMint(uint256 quantity, uint256 callerPublicSaleKey)
publicSaleMint(uint256 quantity, uint256 nonce, bytes signature)
publicSaleMint(uint8 number_of_nft)
publicSummon(uint256 numWarriors)
public_mint(uint256 num)
purchase(address beneficiary)
purchase(address beneficiary, uint256 qty)
purchase(address referrer,uint40 listingId,bytes data)
purchase(address to, uint256 qty, bytes32[] merkleProof)
purchase(uint256 _price)
purchase(uint256 _value, address _recipient, address _referrer, address _keyManager, bytes _data)
purchase(uint256 _value, address _recipient, address _referrer, bytes _data)
purchase(uint256[5] character, uint256[3] head, uint256[6] clothing, uint256[6] accessories, uint256[2] items)
purchaseNFT(uint256 _cardId, uint256 _amount)
purchasePresale(uint256 quantity, uint256 maxQuantity, uint256 pricePerToken, bytes32[] merkleProof)
purchaseSet(uint256 _id)
qualifiedMint(uint256 amount_, bytes signature_, uint256 nonce_)
receiveByEthereumAssetAddress(address tokenAddress, uint256 amount, address to, address from, bytes32 txHash, uint8[] v, bytes32[] r, bytes32[] s)
reclaim(uint256 id, address owner)
redeem()
redeem(address _beneficiary, address _underlying, uint256 _underlyingAmount)
redeem(address)
redeem(uint256 tokens)
redeemBatch(address owner, address initialCollection, uint256[] cloneXIds, uint256[] wearableIds, uint256[] amount)
redeemLocal(uint16 _dstChainId,uint256 _srcPoolId,uint256 _dstPoolId,address _refundAddress,uint256 _amountLP,bytes _to,tuple _lzTxParams)
redeemMult(uint256[] _tokenIds, address _tokenOut)
redeemOrder(uint256 amount)
redeemPackage(uint256 index, address recipient, uint256 amount, bytes32[] merkleProof)
redeemRebalancingSetUnwrappingEther(address _rebalancingSetAddress, uint256 _rebalancingSetQuantity, bool _keepChangeInVault)
redeemTokens(uint256 amount)
redeemUnderlying(uint256 redeemAmount)
register()
register(address _pubish, string _abi)
register(string name, address directAddress)
register(string name, address owner, uint256 duration, bytes32 secret)
register(string[] _names, uint16[] _registrationYears)
registerAll(string[] _names, bytes32[] _secrets, uint256 _duration)
registerAndDeposit(address ethKey, uint256 starkKey, bytes signature, uint256 assetType, uint256 vaultId)
registerAndDepositERC20(address ethKey, uint256 starkKey, bytes signature, uint256 assetType, uint256 vaultId, uint256 quantizedAmount)
registerAndDepositEth(address ethKey, uint256 starkKey, bytes signature, uint256 assetType, uint256 vaultId)
registerAndMintForWhitelist(bytes32 hash, bytes signature, uint256 numberOfTokens, uint256 customLimit)
registerProxy()
registerUser(address ethKey, uint256 starkKey, bytes signature)
registerWithConfig(string name, address owner, uint256 duration, bytes32 secret, address resolver, address addr)
reinvest()
relay(bytes data, bytes signature)
relayTokens(address token, uint256 _value)
release(tuple schedule,bytes32[] proof)
remainingSale()
removeBid(uint256 tokenId)
removeCollateralETH(uint256 _amount)
removeEgg(uint256 _eggId)
removeLiquidity(address l1Token, uint256 lpTokenAmount, bool sendEth)
removeLiquidity(address token_address, uint256 stableswap_token_amount, uint256 deadline)
removeLiquidity(uint256 _amount, address[] _reserveTokens, uint256[] _reserveMinReturnAmounts)
removeLiquidity(uint256 _id, uint32 _portion)
removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline)
removeLiquidity(uint256 withdrawAmount, uint256 deadline)
removeLiquidityETHWithPermit(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s)
removeLiquidityWithPermit(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s)
remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount)
renew(string name, uint256 duration)
renewAll(string[] names, uint256 duration)
repay(address _owner, uint256 _pid, uint256 _amount, address _payer)
repayBorrow(uint256 repayAmount)
requestRandomNumber(uint256[] tokenIds)
reserve(bytes32 _name)
reserveViaWrapper(uint256 versionIndex,bytes32 name)
reservedMint(uint8 amount)
resolveTo(address to, uint256 tokenId)
robustSwapETHForSpecificNFTs(tuple[] swapList,address ethRecipient,address nftRecipient,uint256 deadline)
run(tuple input)
safeExecuteSignaturesWithAutoGasLimit(bytes _data, bytes _signatures)
safeMint(bytes32[] proof, uint256 amount)
safeMint(uint256 _num)
safeMintAvatar(address _to)
safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes _data)
safeTransferFrom(address from, address to, uint256 assetId)
safeTransferFrom(address from, address to, uint256 assetId, bytes userData)
safeTransferWhileNesting(address from, address to, uint256 tokenId)
saleMint(uint16 amount)
saleMint(uint256 quantity)
seekDivineKnowledge(uint256 tokenId)
selectiveDeposit(address[] _derivatives, uint256[] _amounts, uint256 _minComponents, uint256 _deadline)
sell(uint256 amount)
sellEthForTokenToUniswapV3(bytes encodedPath, uint256 minBuyAmount, address recipient)
sellFei(uint256 maxPenalty, uint256 amountIn, uint256 amountOutMin, address to, uint256 deadline)
sellToLiquidityProvider(address inputToken, address outputToken, address provider, address recipient, uint256 sellAmount, uint256 minBuyAmount, bytes auxiliaryData)
sellToUniswap(address[] tokens, uint256 sellAmount, uint256 minBuyAmount, bool isSushi)
sellTokenForEthToUniswapV3(bytes encodedPath, uint256 sellAmount, uint256 minBuyAmount, address recipient)
sellTokenForTokenToUniswapV3(bytes encodedPath, uint256 sellAmount, uint256 minBuyAmount, address recipient)
send(address _token, uint256 _amount, uint32 _destination, bytes32 _recipient, bool _enableFast)
send(address _tokenAddress, uint256 _amount, uint256 _chainIdTo, bytes _receiver, bytes _permit, bool _useAssetFee, uint32 _referralCode, bytes _autoParams)
sendERC20ToSidechain(bytes32 to, uint256 amount, address tokenAddress)
sendToEVMLike(uint32 _domain, address _to, bool _enableFast)
sendToL2(uint256 chainId, address recipient, uint256 amount, uint256 amountOutMin, uint256 deadline, address relayer, uint256 relayerFee)
setAddr(bytes32 node, address addr)
setAddr(bytes32 node, uint256 coinType, bytes addr_)
setAllowListPrice(uint256 _allowListPrice)
setApprovalForAll(address operator, bool authorized)
setApprovalForModule(address _module, bool _approved)
setAwakeningState(uint256[] tokenIds, bool state)
setBid(uint256 tokenId,tuple bid)
setBuyPrice(address token_, uint256 tokenId_, uint256 price_)
setContenthash(bytes32 node, bytes hash)
setDelegate(bytes32 id, address delegate)
setMany(string[] keys, string[] values, uint256 tokenId)
setMasterContractApproval(address user, address masterContract, bool approved, uint8 v, bytes32 r, bytes32 s)
setMaxPerAddress(uint256 max)
setMaxPerAllowList(uint256 _maxPerAllowList)
setMerkleRoot(bytes32 _merkleRoot)
setName(string DogName)
setOwner(bytes32 node, address owner)
setPaintArt(uint256 pcId)
setPaintArt(uint256 pcId, bytes16 title, uint256 data1, uint256 data2)
setResolver(bytes32 node, address resolver)
setSubnodeRecord(bytes32 node, bytes32 label, address owner_, address resolver_, uint64 ttl_)
setText(bytes32 node, string key, string value)
settle()
simpleBuy(tuple data)
simpleSwap(address fromToken, address toToken, uint256 fromAmount, uint256 toAmount, uint256 expectedAmount, address[] callees, bytes exchangeData, uint256[] startIndexes, uint256[] values, address beneficiary, string referrer)
singleERC721ListingFillWithPrecheck(address referrer, bytes data, uint8 exchangeKind, address collection, uint256 tokenId, address receiver, address expectedOwner, uint16 feeBps)
singleERC721ListingFillWithPrecheck(bytes data, uint8 exchangeKind, address collection, uint256 tokenId, address receiver, address expectedOwner, address feeRecipient, uint16 feeBps)
sleep()
spawn(address asset, uint256 mainAmount, uint256 colAmount, uint256 usdpAmount)
stake(address _pair, uint256 _amount)
stake(address _to, uint256 _amount, bool _rebasing, bool _claim)
stake(address vault, address vaultFactory, address token, uint256 amount, bytes permission)
stake(uint128 amount)
stake(uint256 _amount, uint8 _timespan)
stake(uint256 amount, bytes data)
stake(uint256 caveId, uint256 tokenId)
stake(uint256 countryID)
stake(uint256[] tokenIDList)
stakeByIds(uint256[] tokenIds)
stakeEnd(uint256 stakeIndex, uint40 stakeIdParam)
stakeStart(uint256 newStakedSuns, uint256 newStakedDays)
stakeTurtles(uint256[] tokenIds_)
stakeWithPermit(uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s)
start()
startBridgeTokensViaCBridge(tuple _lifiData,tuple _cBridgeData)
startBridgeTokensViaHop(tuple _lifiData,tuple _hopData)
startExecution(tuple[] actions,tuple[] inputs,tuple fee,tuple[] requiredOutputs)
startParty(address _marketWrapper, address _nftContract, uint256 _tokenId, uint256 _auctionId, string _name, string _symbol)
startParty(address _nftContract,uint256 _maxPrice,uint256 _secondsToTimeout,address[] _deciders,tuple _split,tuple _tokenGate,string _name,string _symbol)
submit(address id)
supply(address asset, uint256 amount)
supply(address platform, address token, uint256 amount)
supplyOrder(uint256 amount)
swap(address caller,tuple desc,tuple[] calls)
swap(address fromAssetHash, uint64 toPoolId, uint64 toChainId, bytes toAssetHash, bytes toAddress, uint256 amount, uint256 minOutAmount, uint256 fee, uint256 id)
swap(address inToken, address outToken, uint256 inAmount, uint256 minOutAmount, uint256 guaranteedAmount, address referrer, address[] addressesToCall, bytes dataToCall, uint256[] offsets, uint256[] gasLimitsAndValues)
swap(address src, address dst, uint256 amount, uint256 minReturn, address referral)
swap(bytes data)
swap(string aggregatorId, address tokenFrom, uint256 amount, bytes data)
swap(uint16 _dstChainId,uint256 _srcPoolId,uint256 _dstPoolId,address _refundAddress,uint256 _amountLD,uint256 _minAmountLD,tuple _lzTxParams,bytes _to,bytes _payload)
swap(uint256 _tokenId)
swap(uint256 poolIndex, uint256 requestedPaymentAmount)
swapETH(uint16 _dstChainId, address _refundAddress, bytes _toAddress, uint256 _amountLD, uint256 _minAmountLD)
swapETHForExactTokens(uint256 amountOut, address[] path, address to, uint256 deadline)
swapETHForSpecificNFTs(tuple[] swapList,address ethRecipient,address nftRecipient,uint256 deadline)
swapExactETHForTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline)
swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline)
swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)
swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)
swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)
swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)
swapExactTokensForTokensWithTip(address router,tuple trade)
swapNFTsForToken(tuple[] swapList,uint256 minOutput,address tokenRecipient,uint256 deadline)
swapOnUniswap(uint256 amountIn, uint256 amountOutMin, address[] path)
swapOnUniswap(uint256 amountIn, uint256 amountOutMin, address[] path, uint8 referrer)
swapOnUniswapFork(address factory, bytes32 initCode, uint256 amountIn, uint256 amountOutMin, address[] path)
swapOnUniswapFork(address factory, bytes32 initCode, uint256 amountIn, uint256 amountOutMin, address[] path, uint8 referrer)
swapOnUniswapV2Fork(address tokenIn, uint256 amountIn, uint256 amountOutMin, address weth, uint256[] pools)
swapOnUniswapV2ForkWithPermit(address tokenIn, uint256 amountIn, uint256 amountOutMin, address weth, uint256[] pools, bytes permit)
swapOnZeroXv4(address fromToken, address toToken, uint256 fromAmount, uint256 amountOutMin, address exchange, bytes payload)
swapSaiToDai(uint256 wad)
swapTokenForSpecificNFTs(uint256[] nftIds, uint256 maxExpectedTokenInput, address nftRecipient, bool isRouter, address routerCaller)
swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline)
swapTokensGeneric(tuple _lifiData,tuple[] _swapData)
synthesisMint(uint256[] _tokenId)
takingTickets(uint256 _amount)
toggleAllowListMint()
toggleNesting(uint256[] tokenIds)
togglePublicMint()
tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline)
tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient)
tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient)
tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr)
tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr)
tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr)
trade(bool isEthToKNC, uint256 srcAmount, uint256 firstQty, uint256 expectedDestAmount)
tradeAndSend(address from, address to, address recipient, uint256 fromAmount, address[] exchanges, address[] approvals, bytes data, uint256[] offsets, uint256[] etherValues, uint256 limitAmount, uint256 tradeType)
tradeWithHint(address src, uint256 srcAmount, address dest, address destAddress, uint256 maxDestAmount, uint256 minConversionRate, address walletId, bytes hint)
transfer(address _to, uint256 _value)
transfer(bytes32 _name, address _to)
transferBatch(tuple[] pairs,address to)
transferERC20(address _tokenAddress, address _to, uint256 _value)
transferERC721(tuple[] erc721Details,address recipient)
transferFrom(address _from, address _to, uint256 _value)
transferOwnership(address newOwner)
transferTimeLockedTokensAfterTimePeriod(address token, address to, uint256 amount)
transferWithSwap(address _dstTransferSwapper,tuple _desc,tuple[] _srcSwaps,tuple[] _dstSwaps)
transmitAndSellTokenForEth(address inputToken,uint256 inputAmount,uint256 outputAmount,uint256 goodUntil,address destinationAddress,tuple theSignature,bytes auxiliaryData)
transmitAndSwap(address inputToken,address outputToken,uint256 inputAmount,uint256 outputAmount,uint256 goodUntil,address destinationAddress,tuple theSignature,bytes auxiliaryData)
uniswapV3Swap(uint256 amount, uint256 minReturn, uint256[] pools)
uniswapV3SwapToWithPermit(address recipient, address srcToken, uint256 amount, uint256 minReturn, uint256[] pools, bytes permit)
unlock(address _token, address _recipient)
unlockAnimatedWithZodiacs(bytes32 hash, bytes signature, uint256[] zodiacIds, uint256 tokenId)
unlockSwappableBackgroundsWithZodiac(uint256 zodiacId, uint256 tokenId)
unlockToken(bytes proofData, uint64 proofBlockHeight)
unoswap(address srcToken, uint256 amount, uint256 minReturn, bytes32[])
unoswapWithPermit(address srcToken, uint256 amount, uint256 minReturn, bytes32[] pools, bytes permit)
unstake(address _to, uint256 _amount, bool _trigger, bool _rebasing)
unstake(address beneficiary, uint256 stakeAmount, uint256 rewardsAmount)
unstake(uint128 amount)
unstake(uint256 amount)
unstake(uint256 stakeID, bytes data, bool _isForced)
unstakeAll()
unstakeAndClaim(address vault, address vaultFactory, address recipient, address token, uint256 amount, bool claimBonusReward, bytes permission)
unstakeByIds(uint256[] tokenIds)
unstakeTurtles(uint256[] tokenIds_)
unwrapToken(uint256 amount)
update(bytes32 ilk)
updateRoyaltyInfoForCollectionIfOwner(address collection, address setter, address receiver, uint256 fee)
updateUserPrice(uint256 _new)
userClaim(uint256 index)
userDeposit(uint256 _amount)
userWithdrawTokens()
verifyHeaderAndExecuteTx(bytes proof, bytes rawHeader, bytes headerProof, bytes curRawHeader, bytes headerSig)
whiteListMint(bytes32[] proof)
whiteListMint(uint256 _count)
whitelistBuy(uint256 qty, uint256 tokenId, bytes32[] proof)
whitelistMint(string word,uint256 level,bytes sig)
whitelistMint(uint256 _mintAmount)
whitelistMint(uint256 _quantity, bytes32[] _proof, uint16 phase)
whitelistMint(uint256 num, bytes32[] proof)
whitelistMint(uint64 quantity, bytes32[] merkleProof)
whitelistMint(uint8 _mintAmount, bytes32[] merkleProof)
withdraw()
withdraw(address to, uint256 value)
withdraw(address token, uint256 amount, address destination)
withdraw(uint256 _amount, address _to)
withdraw(uint256 _eth, uint256 _wei)
withdraw(uint256 _pid, uint256 _amount, address _ref)
withdraw(uint256 amount)
withdrawAll()
withdrawAll(bool selfdistruct_)
withdrawAvailableBalance()
withdrawChoose(uint256[] _tokenId)
withdrawERC20(address _tokenAddress, uint256 _amount)
withdrawERC20For(uint256 _withdrawalId, address _user, address _token, uint256 _amount, bytes _signatures)
withdrawERC721(address nftContract, uint256[] tokenIds)
withdrawETH(uint256 _vaultId, uint8 _tranche)
withdrawETH(uint256 amount)
withdrawInstantlyFrom(address from, uint256 amount, address controlledToken, uint256 maximumExitFee)
withdrawLockedGEL(address _to)
withdrawMerkleProof(uint32 tokenID, uint192 amount, uint256 babyPubKey, uint32 numExitRoot, uint256[] siblings, uint48 idx, bool instantWithdraw)
withdrawMoney()
withdrawPrincipal(uint256 _amount, address _destination)
withdrawTokens(address _token)
withdrawUnstakedBalance(uint256 amount)
wnsRegister(tuple[] register,bytes[] sig)
wrap(bytes32 fortressHash)
